/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch";
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: "sanity.imagePalette";
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions";
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type SanityFileAsset = {
	_id: string;
	_type: "sanity.fileAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type Geopoint = {
	_type: "geopoint";
	lat?: number;
	lng?: number;
	alt?: number;
};

export type AllPosts = {
	_type: "all-posts";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
};

export type FormNewsletter = {
	_type: "form-newsletter";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	stackAlign?: "left" | "center";
	consentText?: string;
	buttonText?: string;
	successMessage?: string;
};

export type Faqs = {
	_type: "faqs";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	faqs?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "faq";
	}>;
};

export type LogoCloud1 = {
	_type: "logo-cloud-1";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	title?: string;
	images?: Array<{
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	}>;
};

export type LogoCloud2 = {
	_type: "logo-cloud-2";
	padding?: SectionPadding;
	colorVariant?: ColorVariant;
	title?: string;
	subtitle?: string;
	images: Array<{
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	}>;
};

export type Cta1 = {
	_type: "cta-1";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	sectionWidth?: "default" | "narrow";
	stackAlign?: "left" | "center";
	tagLine?: string;
	title?: string;
	body?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	} | {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	} | {
		videoId?: string;
		_type: "youtube";
		_key: string;
	} | {
		_key: string;
	} & Code>;
	links?: Array<{
		_key: string;
	} & Link>;
};

export type Timelines1 = {
	_type: "timelines-1";
	title?: string;
	tagLine?: string;
	body?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	} | {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	} | {
		videoId?: string;
		_type: "youtube";
		_key: string;
	} | {
		_key: string;
	} & Code>;
};

export type TimelineRow = {
	_type: "timeline-row";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	timelines?: Array<{
		_key: string;
	} & Timelines1>;
};

export type Carousel2 = {
	_type: "carousel-2";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	testimonial?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "testimonial";
	}>;
};

export type Carousel1 = {
	_type: "carousel-1";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	size?: "one" | "two" | "three";
	indicators?: "none" | "dots" | "count";
	images?: Array<{
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	}>;
};

export type GridRow = {
	_type: "grid-row";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	gridColumns?: "grid-cols-2" | "grid-cols-3" | "grid-cols-4";
	columns?: Array<{
		_key: string;
	} & GridCard | {
		_key: string;
	} & GridPost | {
		_key: string;
	} & PricingCard>;
};

export type GridPost = {
	_type: "grid-post";
	post?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "post";
	};
};

export type PricingCard = {
	_type: "pricing-card";
	title?: string;
	tagLine?: string;
	price?: {
		value?: number;
		period?: string;
	};
	list?: Array<string>;
	excerpt?: string;
	link?: Link;
};

export type GridCard = {
	_type: "grid-card";
	title?: string;
	excerpt?: string;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
	};
	link?: Link;
};

export type SplitInfo = {
	_type: "split-info";
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
	};
	title?: string;
	body?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	} | {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	} | {
		videoId?: string;
		_type: "youtube";
		_key: string;
	} | {
		_key: string;
	} & Code>;
	tags?: Array<string>;
};

export type SplitInfoList = {
	_type: "split-info-list";
	list?: Array<{
		_key: string;
	} & SplitInfo>;
};

export type SplitImage = {
	_type: "split-image";
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
	};
};

export type SplitCard = {
	_type: "split-card";
	tagLine?: string;
	title?: string;
	body?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	} | {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	} | {
		videoId?: string;
		_type: "youtube";
		_key: string;
	} | {
		_key: string;
	} & Code>;
};

export type SplitCardsList = {
	_type: "split-cards-list";
	list?: Array<{
		_key: string;
	} & SplitCard>;
};

export type SplitContent = {
	_type: "split-content";
	sticky?: boolean;
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	tagLine?: string;
	title?: string;
	body?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	} | {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	} | {
		videoId?: string;
		_type: "youtube";
		_key: string;
	} | {
		_key: string;
	} & Code>;
	link?: Link;
};

export type SplitRow = {
	_type: "split-row";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	noGap?: boolean;
	splitColumns?: Array<{
		_key: string;
	} & SplitContent | {
		_key: string;
	} & SplitCardsList | {
		_key: string;
	} & SplitImage | {
		_key: string;
	} & SplitInfoList>;
};

export type SectionHeader = {
	_type: "section-header";
	padding?: SectionPadding;
	colorVariant?: "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";
	sectionWidth?: "default" | "narrow";
	stackAlign?: "left" | "center";
	tagLine?: string;
	title?: string;
	description?: string;
};

export type Hero2 = {
	_type: "hero-2";
	tagLine?: string;
	title?: string;
	body?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	} | {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	} | {
		videoId?: string;
		_type: "youtube";
		_key: string;
	} | {
		_key: string;
	} & Code>;
	links?: Array<{
		_key: string;
	} & Link>;
};

export type Hero1 = {
	_type: "hero-1";
	tagLine?: string;
	title?: string;
	body?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	} | {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	} | {
		videoId?: string;
		_type: "youtube";
		_key: string;
	} | {
		_key: string;
	} & Code>;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
	};
	links?: Array<{
		_key: string;
	} & Link>;
};

export type SectionPadding = {
	_type: "section-padding";
	top?: boolean;
	bottom?: boolean;
};

export type ButtonVariant = "default" | "destructive" | "outline" | "secondary" | "ghost" | "link";

export type ColorVariant = "background" | "primary" | "secondary" | "card" | "accent" | "destructive" | "muted";

export type Link = {
	_type: "link";
	title?: string;
	href?: string;
	target?: boolean;
	buttonVariant?: ButtonVariant;
};

export type BlockContent = Array<{
	children?: Array<{
		marks?: Array<string>;
		text?: string;
		_type: "span";
		_key: string;
	}>;
	style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
	listItem?: "bullet" | "number";
	markDefs?: Array<{
		href?: string;
		_type: "link";
		_key: string;
	}>;
	level?: number;
	_type: "block";
	_key: string;
} | {
	asset?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
	};
	hotspot?: SanityImageHotspot;
	crop?: SanityImageCrop;
	alt?: string;
	_type: "image";
	_key: string;
} | {
	videoId?: string;
	_type: "youtube";
	_key: string;
} | {
	_key: string;
} & Code>;

export type Testimonial = {
	_id: string;
	_type: "testimonial";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	title?: string;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	body?: BlockContent;
	rating?: number;
	orderRank?: string;
};

export type Faq = {
	_id: string;
	_type: "faq";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	body?: BlockContent;
	orderRank?: string;
};

export type Category = {
	_id: string;
	_type: "category";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	orderRank?: string;
};

export type Post = {
	_id: string;
	_type: "post";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	excerpt?: string;
	author?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "author";
	};
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
	};
	categories?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "category";
	}>;
	body?: BlockContent;
	meta_title?: string;
	meta_description?: string;
	noindex?: boolean;
	ogImage?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
};

export type Author = {
	_id: string;
	_type: "author";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	slug?: Slug;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
	};
	orderRank?: string;
};

export type Page = {
	_id: string;
	_type: "page";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	blocks?: Array<{
		_key: string;
	} & Hero1 | {
		_key: string;
	} & Hero2 | {
		_key: string;
	} & SectionHeader | {
		_key: string;
	} & SplitRow | {
		_key: string;
	} & GridRow | {
		_key: string;
	} & Carousel1 | {
		_key: string;
	} & Carousel2 | {
		_key: string;
	} & TimelineRow | {
		_key: string;
	} & Cta1 | {
		_key: string;
	} & LogoCloud1 | {
		_key: string;
	} & LogoCloud2 | {
		_key: string;
	} & Faqs | {
		_key: string;
	} & FormNewsletter | {
		_key: string;
	} & AllPosts | {
		_key: string;
	} & BigStatsSection | {
		_key: string;
	} & SocialProof | {
		_key: string;
	} & FeatureCard | {
		_key: string;
	} & FlexColumns | {
		_key: string;
	} & StatsCard | {
		_key: string;
	} & Cards | {
		_key: string;
	} & TabbedContent>;
	meta_title?: string;
	meta_description?: string;
	noindex?: boolean;
	ogImage?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	orderRank?: string;
};

export type SanityImageCrop = {
	_type: "sanity.imageCrop";
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot";
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageAsset = {
	_id: string;
	_type: "sanity.imageAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData";
	name?: string;
	id?: string;
	url?: string;
};

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata";
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Slug = {
	_type: "slug";
	current?: string;
	source?: string;
};

export type Code = {
	_type: "code";
	language?: string;
	filename?: string;
	code?: string;
	highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | AllPosts | FormNewsletter | Faqs | LogoCloud1 | LogoCloud2 | Cta1 | Timelines1 | TimelineRow | Carousel2 | Carousel1 | GridRow | GridPost | PricingCard | GridCard | SplitInfo | SplitInfoList | SplitImage | SplitCard | SplitCardsList | SplitContent | SplitRow | SectionHeader | Hero2 | Hero1 | SectionPadding | ButtonVariant | ColorVariant | Link | BlockContent | Testimonial | Faq | Category | Post | Author | Page | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/sitemap.ts
// Variable: pagesQuery
// Query: *[_type == 'page'] | order(slug.current) {      'url': $baseUrl + select(slug.current == 'index' => '', '/' + slug.current),      'lastModified': _updatedAt,      'changeFrequency': 'daily',      'priority': select(        slug.current == 'index' => 1,        0.5      )    }
export type PagesQueryResult = Array<{
	url: unknown;
	lastModified: string;
	changeFrequency: "daily";
	priority: 0.5 | 1;
}>;
// Variable: postsQuery
// Query: *[_type == 'post'] | order(_updatedAt desc) {      'url': $baseUrl + '/blog/' + slug.current,      'lastModified': _updatedAt,      'changeFrequency': 'weekly',      'priority': 0.7    }
export type PostsQueryResult = Array<{
	url: unknown;
	lastModified: string;
	changeFrequency: "weekly";
	priority: 0.7;
}>;

// Source: ./sanity/queries/page.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{    blocks[]{        _type == "hero-1" => {    _type,    _key,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    image{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    links,  },        _type == "hero-2" => {    _type,    _key,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },        _type == "section-header" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    description,    link,  },        _type == "split-row" => {    _type,    _key,    padding,    colorVariant,    noGap,    splitColumns[]{        _type == "split-content" => {    _type,    _key,    sticky,    padding,    colorVariant,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    link,  },        _type == "split-cards-list" => {    _type,    _key,    list[]{      tagLine,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "split-image" => {    _type,    _key,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "split-info-list" => {    _type,    _key,    list[]{      image{        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      tags[],    },  },    },  },        _type == "grid-row" => {    _type,    _key,    padding,    colorVariant,    gridColumns,    columns[]{        _type == "grid-card" => {    _type,    _key,    title,    excerpt,    image{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == "pricing-card" => {    _type,    _key,    title,    tagLine,    price,    list[],    excerpt,    link,  },        _type == "grid-post" => {    _type,    _key,    post->{      title,      slug,      excerpt,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      categories[]->{        _id,        title,      },    },  },    },  },        _type == "three-grid" => {    _type,    _key,    title,    description,    padding,    colorVariant,    items[]{      _key,      title,      description,      content[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      link{        href,        label,      },    },  },        _type == "carousel-1" => {    _type,    _key,    padding,    colorVariant,    size,    orientation,    indicators,    images[]{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "carousel-2" => {    _type,    _key,    padding,    colorVariant,    testimonial[]->{      _id,      name,      title,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      },      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },      rating,    },  },        _type == "timeline-row" => {    _type,    _key,    padding,    colorVariant,    timelines[]{      title,      tagLine,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "cta-1" => {    _type,    _key,    padding,    colorVariant,    sectionWidth,    stackAlign,    tagLine,    title,    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    links,  },        _type == "logo-cloud-1" => {    _type,    _key,    padding,    colorVariant,    title,    images[]{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "logo-cloud-2" => {    _type,    _key,    padding,    colorVariant,    title,    subtitle,    images[]{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },  },        _type == "faqs" => {    _type,    _key,    padding,    colorVariant,    faqs[]->{      _id,      title,      body[]{        ...,        _type == "image" => {          ...,          asset->{            _id,            url,            mimeType,            metadata {              lqip,              dimensions {                width,                height              }            }          }        }      },    },  },        _type == "form-newsletter" => {    _type,    _key,    padding,    colorVariant,    stackAlign,    consentText,    buttonText,    successMessage,  },        _type == "all-posts" => {    _type,    _key,    padding,    colorVariant,  },        _type == "big-stats-section" => {    _type,    _key,    title,    description,    padding,    colorVariant,    stats[]{      _key,      value,      label,      prefix,      suffix,    },  },        _type == "social-proof" => {    _type,    _key,    title,    description,    padding,    colorVariant,    testimonials[]{      _key,      name,      position,      quote,      companyName,      image{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt,      },      companyLogo{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt,      },      stats[]{        _key,        value,        label,        subLabel      }    }  },        _type == "feature-card" => {    _type,    _key,    title,    description,    padding,    colorVariant,    image{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == "flex-columns" => {    _type,    _key,    columns[]{      _key,      title,      description,      image{        ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt      },      _key,      title,      description,      image{        ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt      }    },  },        _type == "stats-card" => {    _type,    _key,    title,    description,    padding,    colorVariant,    stats[]{      _key,      value,      label,      prefix,      suffix,    },  },        _type == "cards" => {    _type,    _key,    title,    description,    padding,    colorVariant,    cards[]{      _key,      title,      description,      image{        ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt      },      actionText,      actionUrl    }    }    },    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }  }
export type PAGE_QUERYResult = {
	blocks: Array<{
		_type: "all-posts";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
	} | {
		_type: "carousel-1";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		size: "one" | "three" | "two" | null;
		orientation: null;
		indicators: "count" | "dots" | "none" | null;
		images: Array<{
			asset: {
				_id: string;
				url: string | null;
				mimeType: string | null;
				metadata: {
					lqip: string | null;
					dimensions: {
						width: number | null;
						height: number | null;
					} | null;
				} | null;
			} | null;
			alt: string | null;
		}> | null;
	} | {
		_type: "carousel-2";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		testimonial: Array<{
			_id: string;
			name: string | null;
			title: string | null;
			image: {
				asset: {
					_id: string;
					url: string | null;
					mimeType: string | null;
					metadata: {
						lqip: string | null;
						dimensions: {
							width: number | null;
							height: number | null;
						} | null;
					} | null;
				} | null;
				alt: null;
			} | null;
			body: Array<{
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: "span";
					_key: string;
				}>;
				style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
				listItem?: "bullet" | "number";
				markDefs?: Array<{
					href?: string;
					_type: "link";
					_key: string;
				}>;
				level?: number;
				_type: "block";
				_key: string;
			} | {
				_key: string;
				_type: "code";
				language?: string;
				filename?: string;
				code?: string;
				highlightedLines?: Array<number>;
			} | {
				asset: {
					_id: string;
					url: string | null;
					mimeType: string | null;
					metadata: {
						lqip: string | null;
						dimensions: {
							width: number | null;
							height: number | null;
						} | null;
					} | null;
				} | null;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt?: string;
				_type: "image";
				_key: string;
			} | {
				videoId?: string;
				_type: "youtube";
				_key: string;
			}> | null;
			rating: number | null;
		}> | null;
	} | {
		_type: "cta-1";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		sectionWidth: "default" | "narrow" | null;
		stackAlign: "center" | "left" | null;
		tagLine: string | null;
		title: string | null;
		body: Array<{
			children?: Array<{
				marks?: Array<string>;
				text?: string;
				_type: "span";
				_key: string;
			}>;
			style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
			listItem?: "bullet" | "number";
			markDefs?: Array<{
				href?: string;
				_type: "link";
				_key: string;
			}>;
			level?: number;
			_type: "block";
			_key: string;
		} | {
			_key: string;
			_type: "code";
			language?: string;
			filename?: string;
			code?: string;
			highlightedLines?: Array<number>;
		} | {
			asset: {
				_id: string;
				url: string | null;
				mimeType: string | null;
				metadata: {
					lqip: string | null;
					dimensions: {
						width: number | null;
						height: number | null;
					} | null;
				} | null;
			} | null;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt?: string;
			_type: "image";
			_key: string;
		} | {
			videoId?: string;
			_type: "youtube";
			_key: string;
		}> | null;
		links: Array<{
			_key: string;
		} & Link> | null;
	} | {
		_type: "faqs";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		faqs: Array<{
			_id: string;
			title: string | null;
			body: Array<{
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: "span";
					_key: string;
				}>;
				style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
				listItem?: "bullet" | "number";
				markDefs?: Array<{
					href?: string;
					_type: "link";
					_key: string;
				}>;
				level?: number;
				_type: "block";
				_key: string;
			} | {
				_key: string;
				_type: "code";
				language?: string;
				filename?: string;
				code?: string;
				highlightedLines?: Array<number>;
			} | {
				asset: {
					_id: string;
					url: string | null;
					mimeType: string | null;
					metadata: {
						lqip: string | null;
						dimensions: {
							width: number | null;
							height: number | null;
						} | null;
					} | null;
				} | null;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt?: string;
				_type: "image";
				_key: string;
			} | {
				videoId?: string;
				_type: "youtube";
				_key: string;
			}> | null;
		}> | null;
	} | {
		_type: "form-newsletter";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		stackAlign: "center" | "left" | null;
		consentText: string | null;
		buttonText: string | null;
		successMessage: string | null;
	} | {
		_type: "grid-row";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		gridColumns: "grid-cols-2" | "grid-cols-3" | "grid-cols-4" | null;
		columns: Array<{
			_type: "grid-card";
			_key: string;
			title: string | null;
			excerpt: string | null;
			image: {
				asset: {
					_id: string;
					url: string | null;
					mimeType: string | null;
					metadata: {
						lqip: string | null;
						dimensions: {
							width: number | null;
							height: number | null;
						} | null;
					} | null;
				} | null;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt: string | null;
				_type: "image";
			} | null;
			link: Link | null;
		} | {
			_type: "grid-post";
			_key: string;
			post: {
				title: string | null;
				slug: Slug | null;
				excerpt: string | null;
				image: {
					asset: {
						_id: string;
						url: string | null;
						mimeType: string | null;
						metadata: {
							lqip: string | null;
							dimensions: {
								width: number | null;
								height: number | null;
							} | null;
						} | null;
					} | null;
					alt: string | null;
				} | null;
				categories: Array<{
					_id: string;
					title: string | null;
				}> | null;
			} | null;
		} | {
			_type: "pricing-card";
			_key: string;
			title: string | null;
			tagLine: string | null;
			price: {
				value?: number;
				period?: string;
			} | null;
			list: Array<string> | null;
			excerpt: string | null;
			link: Link | null;
		}> | null;
	} | {
		_type: "hero-1";
		_key: string;
		tagLine: string | null;
		title: string | null;
		body: Array<{
			children?: Array<{
				marks?: Array<string>;
				text?: string;
				_type: "span";
				_key: string;
			}>;
			style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
			listItem?: "bullet" | "number";
			markDefs?: Array<{
				href?: string;
				_type: "link";
				_key: string;
			}>;
			level?: number;
			_type: "block";
			_key: string;
		} | {
			_key: string;
			_type: "code";
			language?: string;
			filename?: string;
			code?: string;
			highlightedLines?: Array<number>;
		} | {
			asset: {
				_id: string;
				url: string | null;
				mimeType: string | null;
				metadata: {
					lqip: string | null;
					dimensions: {
						width: number | null;
						height: number | null;
					} | null;
				} | null;
			} | null;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt?: string;
			_type: "image";
			_key: string;
		} | {
			videoId?: string;
			_type: "youtube";
			_key: string;
		}> | null;
		image: {
			asset: {
				_id: string;
				url: string | null;
				mimeType: string | null;
				metadata: {
					lqip: string | null;
					dimensions: {
						width: number | null;
						height: number | null;
					} | null;
				} | null;
			} | null;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt: string | null;
			_type: "image";
		} | null;
		links: Array<{
			_key: string;
		} & Link> | null;
	} | {
		_type: "hero-2";
		_key: string;
		tagLine: string | null;
		title: string | null;
		body: Array<{
			children?: Array<{
				marks?: Array<string>;
				text?: string;
				_type: "span";
				_key: string;
			}>;
			style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
			listItem?: "bullet" | "number";
			markDefs?: Array<{
				href?: string;
				_type: "link";
				_key: string;
			}>;
			level?: number;
			_type: "block";
			_key: string;
		} | {
			_key: string;
			_type: "code";
			language?: string;
			filename?: string;
			code?: string;
			highlightedLines?: Array<number>;
		} | {
			asset: {
				_id: string;
				url: string | null;
				mimeType: string | null;
				metadata: {
					lqip: string | null;
					dimensions: {
						width: number | null;
						height: number | null;
					} | null;
				} | null;
			} | null;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt?: string;
			_type: "image";
			_key: string;
		} | {
			videoId?: string;
			_type: "youtube";
			_key: string;
		}> | null;
		links: Array<{
			_key: string;
		} & Link> | null;
	} | {
		_type: "logo-cloud-1";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		title: string | null;
		images: Array<{
			asset: {
				_id: string;
				url: string | null;
				mimeType: string | null;
				metadata: {
					lqip: string | null;
					dimensions: {
						width: number | null;
						height: number | null;
					} | null;
				} | null;
			} | null;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt: string | null;
			_type: "image";
			_key: string;
		}> | null;
	} | {
		_type: "logo-cloud-2";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: ColorVariant | null;
		title: string | null;
		subtitle: string | null;
		images: Array<{
			asset: {
				_id: string;
				url: string | null;
				mimeType: string | null;
				metadata: {
					lqip: string | null;
					dimensions: {
						width: number | null;
						height: number | null;
					} | null;
				} | null;
			} | null;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt: string | null;
			_type: "image";
			_key: string;
		}> | null;
	} | {
		_type: "section-header";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		sectionWidth: "default" | "narrow" | null;
		stackAlign: "center" | "left" | null;
		tagLine: string | null;
		title: string | null;
		description: string | null;
		link: null;
	} | {
		_type: "split-row";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		noGap: boolean | null;
		splitColumns: Array<{
			_type: "split-cards-list";
			_key: string;
			list: Array<{
				tagLine: string | null;
				title: string | null;
				body: Array<{
					children?: Array<{
						marks?: Array<string>;
						text?: string;
						_type: "span";
						_key: string;
					}>;
					style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
					listItem?: "bullet" | "number";
					markDefs?: Array<{
						href?: string;
						_type: "link";
						_key: string;
					}>;
					level?: number;
					_type: "block";
					_key: string;
				} | {
					_key: string;
					_type: "code";
					language?: string;
					filename?: string;
					code?: string;
					highlightedLines?: Array<number>;
				} | {
					asset: {
						_id: string;
						url: string | null;
						mimeType: string | null;
						metadata: {
							lqip: string | null;
							dimensions: {
								width: number | null;
								height: number | null;
							} | null;
						} | null;
					} | null;
					hotspot?: SanityImageHotspot;
					crop?: SanityImageCrop;
					alt?: string;
					_type: "image";
					_key: string;
				} | {
					videoId?: string;
					_type: "youtube";
					_key: string;
				}> | null;
			}> | null;
		} | {
			_type: "split-content";
			_key: string;
			sticky: boolean | null;
			padding: SectionPadding | null;
			colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
			tagLine: string | null;
			title: string | null;
			body: Array<{
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: "span";
					_key: string;
				}>;
				style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
				listItem?: "bullet" | "number";
				markDefs?: Array<{
					href?: string;
					_type: "link";
					_key: string;
				}>;
				level?: number;
				_type: "block";
				_key: string;
			} | {
				_key: string;
				_type: "code";
				language?: string;
				filename?: string;
				code?: string;
				highlightedLines?: Array<number>;
			} | {
				asset: {
					_id: string;
					url: string | null;
					mimeType: string | null;
					metadata: {
						lqip: string | null;
						dimensions: {
							width: number | null;
							height: number | null;
						} | null;
					} | null;
				} | null;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt?: string;
				_type: "image";
				_key: string;
			} | {
				videoId?: string;
				_type: "youtube";
				_key: string;
			}> | null;
			link: Link | null;
		} | {
			_type: "split-image";
			_key: string;
			image: {
				asset: {
					_id: string;
					url: string | null;
					mimeType: string | null;
					metadata: {
						lqip: string | null;
						dimensions: {
							width: number | null;
							height: number | null;
						} | null;
					} | null;
				} | null;
				alt: string | null;
			} | null;
		} | {
			_type: "split-info-list";
			_key: string;
			list: Array<{
				image: {
					asset: {
						_id: string;
						url: string | null;
						mimeType: string | null;
						metadata: {
							lqip: string | null;
							dimensions: {
								width: number | null;
								height: number | null;
							} | null;
						} | null;
					} | null;
					hotspot?: SanityImageHotspot;
					crop?: SanityImageCrop;
					alt: string | null;
					_type: "image";
				} | null;
				title: string | null;
				body: Array<{
					children?: Array<{
						marks?: Array<string>;
						text?: string;
						_type: "span";
						_key: string;
					}>;
					style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
					listItem?: "bullet" | "number";
					markDefs?: Array<{
						href?: string;
						_type: "link";
						_key: string;
					}>;
					level?: number;
					_type: "block";
					_key: string;
				} | {
					_key: string;
					_type: "code";
					language?: string;
					filename?: string;
					code?: string;
					highlightedLines?: Array<number>;
				} | {
					asset: {
						_id: string;
						url: string | null;
						mimeType: string | null;
						metadata: {
							lqip: string | null;
							dimensions: {
								width: number | null;
								height: number | null;
							} | null;
						} | null;
					} | null;
					hotspot?: SanityImageHotspot;
					crop?: SanityImageCrop;
					alt?: string;
					_type: "image";
					_key: string;
				} | {
					videoId?: string;
					_type: "youtube";
					_key: string;
				}> | null;
				tags: Array<string> | null;
			}> | null;
		}> | null;
	} | {
		_type: "timeline-row";
		_key: string;
		padding: SectionPadding | null;
		colorVariant: "accent" | "background" | "card" | "destructive" | "muted" | "primary" | "secondary" | null;
		timelines: Array<{
			title: string | null;
			tagLine: string | null;
			body: Array<{
				children?: Array<{
					marks?: Array<string>;
					text?: string;
					_type: "span";
					_key: string;
				}>;
				style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
				listItem?: "bullet" | "number";
				markDefs?: Array<{
					href?: string;
					_type: "link";
					_key: string;
				}>;
				level?: number;
				_type: "block";
				_key: string;
			} | {
				_key: string;
				_type: "code";
				language?: string;
				filename?: string;
				code?: string;
				highlightedLines?: Array<number>;
			} | {
				asset: {
					_id: string;
					url: string | null;
					mimeType: string | null;
					metadata: {
						lqip: string | null;
						dimensions: {
							width: number | null;
							height: number | null;
						} | null;
					} | null;
				} | null;
				hotspot?: SanityImageHotspot;
				crop?: SanityImageCrop;
				alt?: string;
				_type: "image";
				_key: string;
			} | {
				videoId?: string;
				_type: "youtube";
				_key: string;
			}> | null;
		}> | null;
	}> | null;
	meta_title: string | null;
	meta_description: string | null;
	noindex: boolean | null;
	ogImage: {
		asset: {
			_id: string;
			url: string | null;
			metadata: {
				dimensions: {
					width: number | null;
					height: number | null;
				} | null;
			} | null;
		} | null;
	} | null;
} | null;
// Variable: PAGES_SLUGS_QUERY
// Query: *[_type == "page" && defined(slug)]{slug}
export type PAGES_SLUGS_QUERYResult = Array<{
	slug: Slug | null;
}>;

// Source: ./sanity/queries/post.ts
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{    title,    slug,    image{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    body[]{      ...,      _type == "image" => {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        }      }    },    author->{      name,      image {        ...,        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt      }    },    _createdAt,    _updatedAt,    meta_title,    meta_description,    noindex,    ogImage {      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }}
export type POST_QUERYResult = {
	title: string | null;
	slug: Slug | null;
	image: {
		asset: {
			_id: string;
			url: string | null;
			mimeType: string | null;
			metadata: {
				lqip: string | null;
				dimensions: {
					width: number | null;
					height: number | null;
				} | null;
			} | null;
		} | null;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt: string | null;
		_type: "image";
	} | null;
	body: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	} | {
		_key: string;
		_type: "code";
		language?: string;
		filename?: string;
		code?: string;
		highlightedLines?: Array<number>;
	} | {
		asset: {
			_id: string;
			url: string | null;
			mimeType: string | null;
			metadata: {
				lqip: string | null;
				dimensions: {
					width: number | null;
					height: number | null;
				} | null;
			} | null;
		} | null;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	} | {
		videoId?: string;
		_type: "youtube";
		_key: string;
	}> | null;
	author: {
		name: string | null;
		image: {
			asset: {
				_id: string;
				url: string | null;
				mimeType: string | null;
				metadata: {
					lqip: string | null;
					dimensions: {
						width: number | null;
						height: number | null;
					} | null;
				} | null;
			} | null;
			hotspot?: SanityImageHotspot;
			crop?: SanityImageCrop;
			alt: string | null;
			_type: "image";
		} | null;
	} | null;
	_createdAt: string;
	_updatedAt: string;
	meta_title: string | null;
	meta_description: string | null;
	noindex: boolean | null;
	ogImage: {
		asset: {
			_id: string;
			url: string | null;
			metadata: {
				dimensions: {
					width: number | null;
					height: number | null;
				} | null;
			} | null;
		} | null;
	} | null;
} | null;
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug)] | order(_createdAt desc){    title,    slug,    excerpt,    image{      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },}
export type POSTS_QUERYResult = Array<{
	title: string | null;
	slug: Slug | null;
	excerpt: string | null;
	image: {
		asset: {
			_id: string;
			url: string | null;
			mimeType: string | null;
			metadata: {
				lqip: string | null;
				dimensions: {
					width: number | null;
					height: number | null;
				} | null;
			} | null;
		} | null;
		alt: string | null;
	} | null;
}>;
// Variable: POSTS_SLUGS_QUERY
// Query: *[_type == "post" && defined(slug)]{slug}
export type POSTS_SLUGS_QUERYResult = Array<{
	slug: Slug | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
	interface SanityQueries
	{
		"\n    *[_type == 'page'] | order(slug.current) {\n      'url': $baseUrl + select(slug.current == 'index' => '', '/' + slug.current),\n      'lastModified': _updatedAt,\n      'changeFrequency': 'daily',\n      'priority': select(\n        slug.current == 'index' => 1,\n        0.5\n      )\n    }\n  ": PagesQueryResult;
		"\n    *[_type == 'post'] | order(_updatedAt desc) {\n      'url': $baseUrl + '/blog/' + slug.current,\n      'lastModified': _updatedAt,\n      'changeFrequency': 'weekly',\n      'priority': 0.7\n    }\n  ": PostsQueryResult;
		"\n  *[_type == \"page\" && slug.current == $slug][0]{\n    blocks[]{\n      \n  _type == \"hero-1\" => {\n    _type,\n    _key,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    image{\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    links,\n  }\n,\n      \n  _type == \"hero-2\" => {\n    _type,\n    _key,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n      \n  _type == \"section-header\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    description,\n    link,\n  }\n,\n      \n  _type == \"split-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    noGap,\n    splitColumns[]{\n      \n  _type == \"split-content\" => {\n    _type,\n    _key,\n    sticky,\n    padding,\n    colorVariant,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    link,\n  }\n,\n      \n  _type == \"split-cards-list\" => {\n    _type,\n    _key,\n    list[]{\n      tagLine,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"split-image\" => {\n    _type,\n    _key,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"split-info-list\" => {\n    _type,\n    _key,\n    list[]{\n      image{\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      tags[],\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == \"grid-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    gridColumns,\n    columns[]{\n      \n  _type == \"grid-card\" => {\n    _type,    _key,    title,    excerpt,    image{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },        _type == \"pricing-card\" => {\n    _type,\n    _key,\n    title,\n    tagLine,\n    price,\n    list[],\n    excerpt,\n    link,\n  }\n,\n      \n  _type == \"grid-post\" => {\n    _type,\n    _key,\n    post->{      title,\n      slug,\n      excerpt,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      categories[]->{        _id,\n        title,\n      },\n    },\n  }\n,\n    },\n  }\n,\n      \n  _type == \"three-grid\" => {\n    _type,\n    _key,\n    title,\n    description,\n    padding,\n    colorVariant,\n    items[]{\n      _key,\n      title,\n      description,\n      content[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      link{\n        href,        label,      },\n    },\n  }\n,\n      \n  _type == \"carousel-1\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    size,\n    orientation,\n    indicators,\n    images[]{\n      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt\n    },\n  }\n,\n      \n  _type == \"carousel-2\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    testimonial[]->{\n      _id,\n      name,\n      title,\n      image{\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      },\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n      rating,\n    },\n  }\n,\n      \n  _type == \"timeline-row\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    timelines[]{\n      title,\n      tagLine,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"cta-1\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    sectionWidth,\n    stackAlign,\n    tagLine,\n    title,\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    links,\n  }\n,\n      \n  _type == \"logo-cloud-1\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    title,\n    images[]{\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"logo-cloud-2\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    title,\n    subtitle,\n    images[]{\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n  }\n,\n      \n  _type == \"faqs\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    faqs[]->{\n      _id,\n      title,\n      body[]{\n        ...,\n        _type == \"image\" => {\n          ...,\n          asset->{\n            _id,\n            url,\n            mimeType,\n            metadata {\n              lqip,\n              dimensions {\n                width,\n                height\n              }\n            }\n          }\n        }\n      },\n    },\n  }\n,\n      \n  _type == \"form-newsletter\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n    stackAlign,\n    consentText,\n    buttonText,\n    successMessage,\n  }\n,\n      \n  _type == \"all-posts\" => {\n    _type,\n    _key,\n    padding,\n    colorVariant,\n  }\n,\n      \n  _type == \"big-stats-section\" => {\n    _type,\n    _key,\n    title,\n    description,\n    padding,\n    colorVariant,\n    stats[]{\n      _key,      value,      label,      prefix,      suffix,    },  },        _type == \"social-proof\" => {\n    _type,\n    _key,\n    title,\n    description,\n    padding,\n    colorVariant,\n    testimonials[]{\n      _key,\n      name,\n      position,\n      quote,\n      companyName,\n      image{\n        asset->{\n          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt,      },      companyLogo{        asset->{          _id,          url,          mimeType,          metadata {            lqip,            dimensions {              width,              height            }          }        },        alt,      },      stats[]{\n        _key,\n        value,\n        label,\n        subLabel\n      }\n    }\n  }\n,\n      \n  _type == \"feature-card\" => {\n    _type,\n    _key,\n    title,\n    description,\n    padding,\n    colorVariant,\n    image{      ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt    },    link,  },\n      \n  _type == \"flex-columns\" => {\n    _type,\n    _key,\n    columns[]{\n      _key,\n      title,\n      description,\n      image{        ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt      },\n      _key,\n      title,\n      description,\n      image{        ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt      }\n    },\n  },\n      \n  _type == \"stats-card\" => {\n    _type,\n    _key,\n    title,\n    description,\n    padding,\n    colorVariant,\n    stats[]{\n      _key,\n      value,\n      label,\n      prefix,\n      suffix,\n    },\n  },\n      \n  _type == \"cards\" => {\n    _type,\n    _key,\n    title,\n    description,\n    padding,\n    colorVariant,\n    cards[]{\n      _key,\n      title,\n      description,\n      image{        ...,      asset->{        _id,        url,        mimeType,        metadata {          lqip,          dimensions {            width,            height          }        }      },      alt      },\n      actionText,\n      actionUrl    }\n    }\n    },\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{        _id,        url,        metadata {          dimensions {            width,            height          }        }      },    }\n  }\n": PAGE_QUERYResult;
		"*[_type == \"page\" && defined(slug)]{slug}": PAGES_SLUGS_QUERYResult;
		"*[_type == \"post\" && slug.current == $slug][0]{\n    title,\n    slug,\n    image{\n      ...,\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n    body[]{\n      ...,\n      _type == \"image\" => {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        }\n      }\n    },\n    author->{\n      name,\n      image {\n        ...,\n        asset->{\n          _id,\n          url,\n          mimeType,\n          metadata {\n            lqip,\n            dimensions {\n              width,\n              height\n            }\n          }\n        },\n        alt\n      }\n    },\n    _createdAt,\n    _updatedAt,\n    meta_title,\n    meta_description,\n    noindex,\n    ogImage {\n      asset->{\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,            height          }        }      },\n    }\n}": POST_QUERYResult;
		"*[_type == \"post\" && defined(slug)] | order(_createdAt desc){\n    title,\n    slug,\n    excerpt,\n    image{\n      asset->{\n        _id,\n        url,\n        mimeType,\n        metadata {\n          lqip,\n          dimensions {\n            width,\n            height\n          }\n        }\n      },\n      alt\n    },\n}": POSTS_QUERYResult;
		"*[_type == \"post\" && defined(slug)]{slug}": POSTS_SLUGS_QUERYResult;
	}
}

export type SanityImage = {
	asset: {
		_id: string;
		url: string;
		mimeType?: string;
		metadata?: {
			lqip?: string;
			dimensions?: {
				width: number;
				height: number;
			};
		};
	};
	hotspot?: SanityImageHotspot;
	crop?: SanityImageCrop;
	alt: string;
	_type: "image";
};

export type Cards = {
	_type: "cards";
	title?: string;
	description?: string;
	padding?: SectionPadding;
	colorVariant?: ColorVariant;
	cards?: Array<{
		_key: string;
		title: string;
		description: string;
		image: SanityImage;
		actionText: string;
		actionUrl: string;
	}>;
};

// Add these type definitions before they're used
export type BigStatsSection = {
	_type: "big-stats-section";
	title?: string;
	description?: string;
	padding?: SectionPadding;
	colorVariant?: ColorVariant;
	stats?: Array<{
		_key: string;
		value: string;
		label: string;
		prefix?: string;
		suffix?: string;
	}>;
};

export type SocialProof = {
	_type: "social-proof";
	title?: string;
	description?: string;
	padding?: SectionPadding;
	colorVariant?: ColorVariant;
	testimonials?: Array<{
		_key: string;
		name: string;
		position: string;
		quote: string;
		companyName: string;
		image?: SanityImage;
		companyLogo?: SanityImage;
		stats?: Array<{
			_key: string;
			value: string;
			label: string;
			subLabel?: string;
		}>;
	}>;
};

export type FeatureCard = {
	_type: "feature-card";
	title?: string;
	description?: string;
	padding?: SectionPadding;
	colorVariant?: ColorVariant;
	image?: SanityImage;
	link?: Link;
};

export type FlexColumns = {
	_type: "flex-columns";
	columns?: Array<{
		_key: string;
		title?: string;
		description?: string;
		lightImage: SanityImage;
		darkImage?: SanityImage;
	}>;
	stackAlign?: "left" | "center";
	colorVariant?: ColorVariant;
	padding?: SectionPadding;
};

export type StatsCard = {
	_type: "stats-card";
	title?: string;
	description?: string;
	padding?: SectionPadding;
	colorVariant?: ColorVariant;
	stats?: Array<{
		_key: string;
		value: string;
		label: string;
		prefix?: string;
		suffix?: string;
	}>;
};

export type TabbedContent = {
	_type: "tabbed-content";
	_key: string;
	title?: string;
	description?: string;
	tabs: Array<{
		_key: string;
		id: Slug;
		title: string;
		description: string;
		image: SanityImage;
	}>;
	padding?: SectionPadding;
	colorVariant?: ColorVariant;
	showBrowserFrame?: boolean;
};
